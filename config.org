#+TITLE: My emacs doom configuration
#+AUTHOR: Brett Mandler <brettmandler@gmail.com>
#+PROPERTY: header-args :tangle yes

* Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#personal-information][Personal Information]]
  - [[#general-settings][General settings]]
    - [[#general][General]]
    - [[#interface][Interface]]
  - [[#keybinds][Keybinds]]
    - [[#global-keybinds][Global keybinds]]
    - [[#leader-keybinds][Leader keybinds]]
    - [[#mu4e][Mu4e]]
    - [[#treemacs][Treemacs]]
  - [[#doom-modules][Doom modules]]
    - [[#appemail][app/email]]
    - [[#apptorrent][app/torrent]]
    - [[#completionivy][completion/ivy]]
    - [[#emacseshell][emacs/eshell]]
    - [[#emacsterm][emacs/term]]
    - [[#featureevil][feature/evil]]
    - [[#langjavascript][lang/javascript]]
    - [[#langorg][lang/org]]
    - [[#langsh][lang/sh]]
    - [[#langweb][lang/web]]
    - [[#toolsmagit][tools/magit]]
    - [[#uidoom][ui/doom]]

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Personal Information
Full name and email address
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Brett Mandler"
      user-mail-address "brettmandler@gmail.com")
#+END_SRC
** General settings
*** General
Resize the frame pixelwise. Making emacs compatible with tiling window managers
#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC
Save the current window size and position
(desktop-save-mode 1)
*** Interface
Highlight trailing whitespace
#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
#+END_SRC
** Keybinds
*** Global keybinds
Use ~-~ to jump up to the previous directory like with [[github:tpope/vim-vinegar][vim-vinegar]]
#+BEGIN_SRC emacs-lisp
(after! evil
    (map! :m  "-"  #'dired-jump))
#+END_SRC
Use ~] SPC~ and ~[ SPC~ to insert newlines above/below like with [[github:tpope/vim-unimpaired][vim-unimpaired]]
#+BEGIN_SRC emacs-lisp
(after! evil
    (map! :n  "] SPC" (Œª! (evil-insert-newline-below)(evil-previous-line))
        :n  "[ SPC" (Œª! (evil-insert-newline-above)(evil-next-line))))
#+END_SRC
Sort a region with ~gS~
#+BEGIN_SRC emacs-lisp
(map! :m "gS" #'+brett/sort)
#+END_SRC
Easy window navigation
#+BEGIN_SRC emacs-lisp
(after! evil
  (map! :en "C-h"   #'evil-window-left
        :en "C-j"   #'evil-window-down
        :en "C-k"   #'evil-window-up
        :en "C-l"   #'evil-window-right))
#+END_SRC
*** Leader keybinds
#+BEGIN_SRC emacs-lisp
(map!
 (:leader
   (:prefix "TAB"
     :desc "Rename workspace" :n "r"   #'+workspace/rename)
   (:prefix "f"
     :desc "Find file in dotfiles" :n "t" #'+brett/find-in-dotfiles
     :desc "Browse dotfiles"       :n "T" #'+brett/browse-dotfiles)
   (:prefix "n"
     :desc "Browse mode notes"     :n  "m" #'+brett/find-notes-for-major-mode
     :desc "Browse project notes"  :n  "p" #'+brett/find-notes-for-project)))
#+END_SRC
*** Mu4e
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-mode-map (make-sparse-keymap)
    ;; mu4e-compose-mode-map (make-sparse-keymap)
    mu4e-headers-mode-map (make-sparse-keymap)
    mu4e-main-mode-map (make-sparse-keymap))

(map! (:map (mu4e-main-mode-map mu4e-view-mode-map)
        :leader
        :n "," #'mu4e-context-switch
        :n "." #'mu4e-headers-search-bookmark
        :n ">" #'mu4e-headers-search-bookmark-edit
        :n "/" #'mu4e~headers-jump-to-maildir
        (:map (mu4e-headers-mode-map mu4e-view-mode-map)
          :localleader
          :n "f" #'mu4e-compose-forward
          :n "r" #'mu4e-compose-reply
          :n "c" #'mu4e-compose-new
          :n "e" #'mu4e-compose-edit)
        (:map mu4e-main-mode-map
          :n "q"   #'mu4e-quit
          :n "u"   #'mu4e-update-index
          :n "U"   #'mu4e-update-mail-and-index
          :n "J"   #'mu4e~headers-jump-to-maildir
          :n "c"   #'+email/compose
          :n "b"   #'mu4e-headers-search-bookmark)
        (:map mu4e-headers-mode-map
          :n "q"   #'mu4e~headers-quit-buffer
          :n "r"   #'mu4e-compose-reply
          :n "c"   #'mu4e-compose-edit
          :n "s"   #'mu4e-headers-search-edit
          :n "S"   #'mu4e-headers-search-narrow
          :n "RET" #'mu4e-headers-view-message
          :n "u"   #'mu4e-headers-mark-for-unmark
          :n "U"   #'mu4e-mark-unmark-all
          :n "v"   #'evil-visual-line
          :nv "d"  #'+email/mark
          :nv "="  #'+email/mark
          :nv "-"  #'+email/mark
          :nv "+"  #'+email/mark
          :nv "!"  #'+email/mark
          :nv "?"  #'+email/mark
          :nv "r"  #'+email/mark
          :nv "m"  #'+email/mark
          :n  "x"  #'mu4e-mark-execute-all
          :n "]]"  #'mu4e-headers-next-unread
          :n "[["  #'mu4e-headers-prev-unread
          (:localleader
            :n "s" 'mu4e-headers-change-sorting
            :n "t" 'mu4e-headers-toggle-threading
            :n "r" 'mu4e-headers-toggle-include-related
            :n "%" #'mu4e-headers-mark-pattern
            :n "t" #'mu4e-headers-mark-subthread
            :n "T" #'mu4e-headers-mark-thread))
        (:map mu4e-view-mode-map
          :n "q" #'mu4e~view-quit-buffer
          :n "r" #'mu4e-compose-reply
          :n "c" #'mu4e-compose-edit
          :n "o" #'ace-link-mu4e
          :n "<M-Left>"  #'mu4e-view-headers-prev
          :n "<M-Right>" #'mu4e-view-headers-next
          :n "[m" #'mu4e-view-headers-prev
          :n "]m" #'mu4e-view-headers-next
          :n "[u" #'mu4e-view-headers-prev-unread
          :n "]u" #'mu4e-view-headers-next-unread
          (:localleader
            :n "%" #'mu4e-view-mark-pattern
            :n "t" #'mu4e-view-mark-subthread
            :n "T" #'mu4e-view-mark-thread
            :n "d" #'mu4e-view-mark-for-trash
            :n "r" #'mu4e-view-mark-for-refile
            :n "m" #'mu4e-view-mark-for-move))))

#+END_SRC
*** Treemacs
Allow ~C-h~ and ~C-l~ to switch buffers
#+BEGIN_SRC emacs-lisp
(map!
 (:after treemacs-evil
   (:map evil-treemacs-state-map
     "C-h" #'evil-window-left
     "C-l" #'evil-window-right)))
#+END_SRC
** Doom modules
*** [[doom-modules:app/email/][app/email]]
**** Install
My configuration requires:
+ ~[[github:djnym/isync][isync]]~ (for syncing emails)
+ ~[[github:djcb/mu][mu]]~ (for indexing emails)
+ ~[[github:gopasspw/gopass][gopass]]~ (for storing passwords/authentication)
**** Configuration
***** Isync
****** [[file:~/.config/mbsync/config][Mbsync config]]
Configure mbsync to fetch emails /see also:/ https://wiki.archlinux.org/index.php/isync
#+BEGIN_SRC conf :tangle no
IMAPAccount gmail
Host imap.gmail.com
User brettmandler@gmail.com
PassCmd "gopass show -o -f websites/gmail.com/brettmandler"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/var/mail/
Inbox ~/var/mail/Inbox

Channel gmail-inbox
Master :gmail-remote:
Slave :gmail-local:
Patterns "INBOX"
Create Both
Expunge Both
SyncState *

Channel gmail-trash
Master :gmail-remote:"[Gmail]/Bin"
Slave :gmail-local:"Trash"
Create Both
Expunge Both
SyncState *

Channel gmail-sent
Master :gmail-remote:"[Gmail]/Sent Mail"
Slave :gmail-local:"Sent Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-all
Master :gmail-remote:"[Gmail]/All Mail"
Slave :gmail-local:"All Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-all
Master :gmail-remote:"[Gmail]/Drafts"
Slave :gmail-local:"Drafts"
Create Both
Expunge Both
SyncState *

Group gmail
Channel gmail-inbox
Channel gmail-drafts
Channel gmail-sent
Channel gmail-trash
Channel gmail-all
#+END_SRC
****** Emacs setup
Configure emacs to use mbsync as the ~mu4e-get-mail-command~
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq mu4e-get-mail-command "mbsync -c ~/.config/mbsync/config -a"))
#+END_SRC
***** Mu4e
****** Directories
Setup the deafault /maildirs/
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir        (expand-file-name "~/var/mail")
      mu4e-attachment-dir (expand-file-name "attachments" mu4e-maildir))
#+END_SRC
****** Gmail setup
Configure smtp and folders to work well with gmail
#+BEGIN_SRC emacs-lisp
(setq smtpmail-stream-type 'starttls
      smtpmail-smtp-user "brettmandler"
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq mu4e-sent-folder "/Sent Mail"
      mu4e-drafts-folder "/Drafts"
      mu4e-trash-folder "/Trash"
      mu4e-refile-folder "/All Mail")
      
(setq mu4e-maildir-shortcuts
      '(("/Inbox"     . ?i)
        ("/Sent Mail" . ?s)
        ("/All Mail"  . ?a)
        ("/Trash"     . ?t)))
#+END_SRC
****** Bookmarks
Set bookmarks for easily finding messages
#+BEGIN_SRC emacs-lisp
(setq mu4e-bookmarks
    `(("maildir:/Inbox" "Inbox" ?i)
        ("maildir:/Drafts" "Drafts" ?d)
        ("flag:unread AND maildir:/Inbox" "Unread messages" ?u)
        ("flag:flagged" "Starred messages" ?s)
        ("date:today..now" "Today's messages" ?t)
        ("date:7d..now" "Last 7 days" ?w)
        ("mime:image/*" "Messages with images" ?p)))

#+END_SRC
****** Icons
#+BEGIN_SRC emacs-lisp
(after! mu4e 
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-headers-has-child-prefix '("+" . "‚óº")
        mu4e-headers-empty-parent-prefix '("-" ."‚óΩ")
        mu4e-headers-first-child-prefix '("\\" . "‚Ü≥")
        mu4e-headers-duplicate-prefix '("=" . "‚öå")
        mu4e-headers-default-prefix '("|" . "‚îÉ")
        mu4e-headers-draft-mark '("D" . "üìù ")
        mu4e-headers-flagged-mark '("F" . "üè¥ ")
        mu4e-headers-new-mark '("N" . "‚òÖ ")
        mu4e-headers-passed-mark '("P" . "‚Üí ")
        mu4e-headers-replied-mark '("R" . "‚Üê ")
        mu4e-headers-seen-mark '("S" . "‚úì ")
        mu4e-headers-trashed-mark '("T" . "‚úó ")
        mu4e-headers-attach-mark '("a" . "üìé ")
        mu4e-headers-encrypted-mark '("x" . "üîê ")
        mu4e-headers-signed-mark '("s" . "üîè ")
        mu4e-headers-unread-mark '("u" . "‚úâ ")))
#+END_SRC
*** app/torrent
Use transmission as the emacs torrent client
#+BEGIN_SRC emacs-lisp
(def-package! transmission
  :config
  (setq transmission-host "localhost"
        transmission-service 9091))

#+END_SRC
*** [[doom-modules:completion/ivy/][completion/ivy]]
Set ripgrep as the default program for ivy project search
#+BEGIN_SRC emacs-lisp
(setq +ivy-project-search-engines '(rg))
#+END_SRC
Setup ivy-rich
#+BEGIN_SRC emacs-lisp
(after! ivy
  '(ivy-switch-buffer
    (:columns
     ((ivy-rich-candidate (:width 30))  ; return the candidate itself
      (ivy-rich-switch-buffer-size (:width 7))  ; return the buffer size
      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
     :predicate
     (lambda (cand) (get-buffer cand)))
    counsel-M-x
    (:columns
     ((counsel-M-x-transformer (:width 40))  ; thr original transfomer
      (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the command
    counsel-describe-function
    (:columns
     ((counsel-describe-function-transformer (:width 40))  ; the original transformer
      (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))  ; return the docstring of the function
    counsel-describe-variable
    (:columns
     ((counsel-describe-variable-transformer (:width 40))  ; the original transformer
      (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))  ; return the docstring of the variable
    counsel-recentf
    (:columns
     ((ivy-rich-candidate (:width 0.8)) ; return the candidate itself
      (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))))
  (ivy-rich-mode 1))
#+END_SRC
*** [[doom-modules:emacs/eshell/][emacs/eshell]]
Set aliases for emacs shell
#+BEGIN_SRC emacs-lisp
(after! eshell
  (set-eshell-alias!
   "f"   "find-file $1"
   "l"   "ls -lh"
   "d"   "dired $1"
   "gl"  "(call-interactively 'magit-log-current)"
   "gs"  "magit-status"
   "gc"  "magit-commit"
   "rg"  "rg --color=always $*"))
#+END_SRC
*** [[doom-modules:emacs/term/][emacs/term]]
Use fish as my default shell
#+BEGIN_SRC emacs-lisp
(after! multi-term
  (setq multi-term-program "/usr/bin/fish"))
#+END_SRC
*** [[doom-modules:feature/evil/][feature/evil]]
**** [[github:emacsmirror/evil-replace-with-register][evil-replace-with-register]]
Evil replace with register is a package which allows a user to replace a text
object with the content of the register I have it bound to ~go~
#+BEGIN_SRC emacs-lisp
(def-package! evil-replace-with-register
  :commands (evil-replace-with-register-install)
  :when (featurep! :feature evil)
  :config
  (evil-replace-with-register-install))
#+END_SRC
*** [[doom-modules:lang/javascript/][lang/javascript]]
Set default indentation offset to 2 spaces
#+BEGIN_SRC emacs-lisp
(after! js2-mode (setq js2-basic-offset 2))
#+END_SRC
Enable bounce indentation
#+BEGIN_SRC emacs-lisp
(after! js2-mode (setq js2-bounce-indent-p t))
#+END_SRC
Auto format buffers
#+BEGIN_SRC emacs-lisp
(after! js2-mode (add-hook 'js2-mode-hook 'eslintd-fix-mode))
#+END_SRC
Add support for yarn
#+BEGIN_SRC emacs-lisp
(def-package! yarn
  :after js2-mode
  :config
  (setq yarn-vars-test-cmd "yarn test"))
#+END_SRC
*** [[doom-modules:lang/org/][lang/org]]
Set default directories for org files
#+BEGIN_SRC emacs-lisp
(after! org-mode
  (setq +org-directory (expand-file-name "~/usr/org")
        org-agenda-files (list org-directory)))
#+END_SRC
Change the character that displays on collapsed headings
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ‚ñº ")
#+END_SRC
Change the default bullet character
#+BEGIN_SRC emacs-lisp
(after! org-bullets
  (setq org-bullets-bullet-list '("#")))
#+END_SRC
*** [[doom-modules:lang/sh/][lang/sh]]
**** [[github:gnouc/flycheck-checkbashisms][flycheck-checkbashisms]]
Flycheck checker for checking files begining with =#!/bin/sh= which also contain
code exclusive to bash *requires:* ~checkbashisms~
#+BEGIN_SRC emacs-lisp
(def-package! flycheck-checkbashisms
  :when (and (featurep! :feature syntax-checker)(featurep! :lang sh))
  :after sh-mode
  :hook (flycheck-mode . flycheck-checkbashisms-setup))
#+END_SRC
*** [[doom-modules:lang/web/][lang/web]]
Set default indentation for css to 2 spaces
#+BEGIN_SRC emacs-lisp
(after! css-mode
  (setq css-indent-offset 2))
#+END_SRC
*** [[doom-modules:tools/magit/][tools/magit]]
Set default location for ~magit-list-repositories~
#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories '(("~/src" . 3) ("~/.emacs.d") ("~/.config/doom")))
#+END_SRC
Be sure to automatically sign commits
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-commit-arguments '("--gpg-sign=72B1D27CB7D82F0F")
        magit-rebase-arguments '("--autostash" "--gpg-sign=72B1D27CB7D82F0F")
        magit-pull-arguments   '("--rebase" "--autostash" "--gpg-sign=72B1D27CB7D82F0F"))
  (magit-define-popup-option 'magit-rebase-popup
    ?S "Sign using gpg" "--gpg-sign=" #'magit-read-gpg-secret-key))
#+END_SRC
Enable magithub
#+BEGIN_SRC emacs-lisp
(setq +magit-hub-features t)
#+END_SRC
Set the prefered git url method
#+BEGIN_SRC emacs-lisp
(after! magithub (setq magithub-preferred-remote-method 'git_url))
#+END_SRC
Set the default directory to clone new repos
#+BEGIN_SRC emacs-lisp
(after! magithub (setq magithub-clone-default-directory "~/src/github.com"))
#+END_SRC
*** [[doom-modules:ui/doom/][ui/doom]]
Doom user interface settings
**** Fonts
I like to use [[github:be5invis/Iosevka][Iosevka]] as my programming font
***** Default font 
~doom-font~ is the default font for emacs to use
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Custom Term Medium" :size 50))
#+END_SRC
***** Variable pitch
~doom-variable-pitch-font~ is a proportonal font used for reading emails, doc etc.
#+BEGIN_SRC emacs-lisp
(setq doom-variable-pitch-font (font-spec :family "Roboto Condensed" :size 20))
#+END_SRC
***** Big font
~doom-big-font~ is the default font to use for ~doom-big-font-mode~
#+BEGIN_SRC emacs-lisp
(setq doom-big-font (font-spec :family "Iosevka Custom Term Medium" :size 24))
#+END_SRC
**** Line Numbers
Use vim-esque relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
**** Theme
#+BEGIN_SRC emacs-lisp
(after! js2-mode
  (make-face-bold js2-function-call))
(make-face-bold font-lock-function-name-face)
(make-face-italic font-lock-comment-face)
(setq doom-theme 'doom-tomorrow-night)
(setq doom-themes-padded-modeline t)
#+END_SRC
