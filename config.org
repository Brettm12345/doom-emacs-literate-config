#+TITLE: My emacs doom configuration
#+AUTHOR: Brett Mandler <brettmandler@gmail.com>
#+PROPERTY: header-args :tangle yes


* [0/2] Tasks
** [-] Finish documentation of [[*%5B%5Bdoom-modules:lang/org/%5D%5Blang/org%5D%5D][lang/org]]
** [ ] Finish documentation of [[org:../.config/doom/config.org][completion/ivy]]
* Table of Contents :TOC_3_gh:
- [[#02-tasks][Tasks]]
  - [[#--finish-documentation-of-langorg][[-] Finish documentation of lang/org]]
  - [[#--finish-documentation-of-completionivy][[ ] Finish documentation of completion/ivy]]
- [[#configuration][Configuration]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-settings][Emacs settings]]
    - [[#general][General]]
    - [[#version-control][Version Control]]
    - [[#interface][Interface]]
    - [[#scrolling][Scrolling]]
  - [[#keybinds][Keybinds]]
    - [[#global-keybinds][Global keybinds]]
    - [[#leader-keybinds][Leader keybinds]]
    - [[#mu4e][Mu4e]]
    - [[#treemacs][Treemacs]]
  - [[#doom-modules][Doom modules]]
    - [[#appemail][app/email]]
    - [[#completioncompany][completion/company]]
    - [[#completionivy][completion/ivy]]
    - [[#editorlispy][editor/lispy]]
    - [[#emacsdired][emacs/dired]]
    - [[#emacseshell][emacs/eshell]]
    - [[#emacsterm][emacs/term]]
    - [[#featureevil][feature/evil]]
    - [[#featureworkspaces][feature/workspaces]]
    - [[#langjavascript][lang/javascript]]
    - [[#langorg][lang/org]]
    - [[#langsh][lang/sh]]
    - [[#langweb][lang/web]]
    - [[#toolsmagit][tools/magit]]
    - [[#toolsprodigy][tools/prodigy]]
    - [[#toolsrgb][tools/rgb]]
    - [[#toolstldr][tools/tldr]]
    - [[#uidoom][ui/doom]]
    - [[#uimodeline][ui/modeline]]
    - [[#uitreemacs][ui/treemacs]]

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Personal Information
Full name and email address
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Brett Mandler"
      user-mail-address "brettmandler@gmail.com")
#+END_SRC
** Emacs settings
*** General
Do not create lockfiles for files being edited
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC
*** Version Control
Folow symlinks when opening files
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
*** Interface
Resize the frame pixelwise. Making emacs compatible with tiling window managers
#+BEGIN_SRC emacs-lisp
(setq frame-resize-pixelwise t)
#+END_SRC
Save the current window size and position
(desktop-save-mode 1)

Highlight trailing whitespace
#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
#+END_SRC
Show keybind help with less of a delay
#+BEGIN_SRC emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.1
        which-key-idle-secondary-delay 0.01
        which-key-sort-order 'which-key-key-order-alpha))
#+END_SRC
Immediately show eldoc
#+BEGIN_SRC emacs-lisp
(setq eldoc-idle-delay 0)
#+END_SRC
*** Scrolling
#+BEGIN_SRC emacs-lisp
(setq
      mouse-wheel-scroll-amount '(3)
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse t
      scroll-step 1)
#+END_SRC
** Keybinds
*** Global keybinds
Use ~-~ to jump up to the previous directory like with [[github:tpope/vim-vinegar][vim-vinegar]]
#+BEGIN_SRC emacs-lisp
(after! evil
    (map! :m  "-"  #'dired-jump))
#+END_SRC
Use ~] SPC~ and ~[ SPC~ to insert newlines above/below like with [[github:tpope/vim-unimpaired][vim-unimpaired]]
#+BEGIN_SRC emacs-lisp
(after! evil
  (map! :m  "] SPC" #'evil-motion-insert-newline-below
        :m  "[ SPC" #'evil-motion-insert-newline-above))
#+END_SRC
Sort a region with ~gS~
#+BEGIN_SRC emacs-lisp
(map! :m "gS" #'+brett/sort)
#+END_SRC
Easy window navigation
#+BEGIN_SRC emacs-lisp
(after! evil
  (map! :en "C-h"   #'evil-window-left
        :en "C-j"   #'evil-window-down
        :en "C-k"   #'evil-window-up
        :en "C-l"   #'evil-window-right))
#+END_SRC
*** Leader keybinds
#+BEGIN_SRC emacs-lisp
(map!
 (:leader
   (:prefix "TAB"
     :desc "Rename workspace"      :n "r"  #'+workspace/rename)
   (:prefix "f"
     :desc "Find file on TRAMP"    :n "t"  #'counsel-tramp)
   (:prefix "n"
     :desc "Browse mode notes"     :n  "m" #'+brett/find-notes-for-major-mode
     :desc "Browse project notes"  :n  "p" #'+brett/find-notes-for-project)
   (:prefix "o"
     :desc "Ranger"                :n  "R" #'ranger)
   (:prefix "t"
     :desc "Rainbow mode"          :n  "r" #'rainbow-mode)))
#+END_SRC
*** Mu4e
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-mode-map (make-sparse-keymap)
    ;; mu4e-compose-mode-map (make-sparse-keymap)
    mu4e-headers-mode-map (make-sparse-keymap)
    mu4e-main-mode-map (make-sparse-keymap))

(map! (:map (mu4e-main-mode-map mu4e-view-mode-map)
        :leader
        :n "," #'mu4e-context-switch
        :n "." #'mu4e-headers-search-bookmark
        :n ">" #'mu4e-headers-search-bookmark-edit
        :n "/" #'mu4e~headers-jump-to-maildir
        (:map (mu4e-headers-mode-map mu4e-view-mode-map)
          :localleader
          :n "f" #'mu4e-compose-forward
          :n "r" #'mu4e-compose-reply
          :n "c" #'mu4e-compose-new
          :n "e" #'mu4e-compose-edit)
        (:map mu4e-main-mode-map
          :n "q"   #'mu4e-quit
          :n "u"   #'mu4e-update-index
          :n "U"   #'mu4e-update-mail-and-index
          :n "J"   #'mu4e~headers-jump-to-maildir
          :n "c"   #'+email/compose
          :n "b"   #'mu4e-headers-search-bookmark)
        (:map mu4e-headers-mode-map
          :n "q"   #'mu4e~headers-quit-buffer
          :n "r"   #'mu4e-compose-reply
          :n "c"   #'mu4e-compose-edit
          :n "s"   #'mu4e-headers-search-edit
          :n "S"   #'mu4e-headers-search-narrow
          :n "RET" #'mu4e-headers-view-message
          :n "u"   #'mu4e-headers-mark-for-unmark
          :n "U"   #'mu4e-mark-unmark-all
          :n "v"   #'evil-visual-line
          :nv "d"  #'+email/mark
          :nv "="  #'+email/mark
          :nv "-"  #'+email/mark
          :nv "+"  #'+email/mark
          :nv "!"  #'+email/mark
          :nv "?"  #'+email/mark
          :nv "r"  #'+email/mark
          :nv "m"  #'+email/mark
          :n  "x"  #'mu4e-mark-execute-all
          :n "]]"  #'mu4e-headers-next-unread
          :n "[["  #'mu4e-headers-prev-unread
          (:localleader
            :n "s" 'mu4e-headers-change-sorting
            :n "t" 'mu4e-headers-toggle-threading
            :n "r" 'mu4e-headers-toggle-include-related
            :n "%" #'mu4e-headers-mark-pattern
            :n "t" #'mu4e-headers-mark-subthread
            :n "T" #'mu4e-headers-mark-thread))
        (:map mu4e-view-mode-map
          :n "q" #'mu4e~view-quit-buffer
          :n "r" #'mu4e-compose-reply
          :n "c" #'mu4e-compose-edit
          :n "o" #'ace-link-mu4e
          :n "<M-Left>"  #'mu4e-view-headers-prev
          :n "<M-Right>" #'mu4e-view-headers-next
          :n "[m" #'mu4e-view-headers-prev
          :n "]m" #'mu4e-view-headers-next
          :n "[u" #'mu4e-view-headers-prev-unread
          :n "]u" #'mu4e-view-headers-next-unread
          (:localleader
            :n "%" #'mu4e-view-mark-pattern
            :n "t" #'mu4e-view-mark-subthread
            :n "T" #'mu4e-view-mark-thread
            :n "d" #'mu4e-view-mark-for-trash
            :n "r" #'mu4e-view-mark-for-refile
            :n "m" #'mu4e-view-mark-for-move))))

#+END_SRC
*** Treemacs
Allow ~C-h~ and ~C-l~ to switch buffers
#+BEGIN_SRC emacs-lisp
(map!
 (:after treemacs-evil
   (:map evil-treemacs-state-map
     "C-h" #'evil-window-left
     "C-l" #'evil-window-right)))
#+END_SRC
** Doom modules
*** [[doom-modules:app/email/][app/email]]
**** Install
My configuration requires:
+ ~[[github:djnym/isync][isync]]~ (for syncing emails)
+ ~[[github:djcb/mu][mu]]~ (for indexing emails)
+ ~[[github:gopasspw/gopass][gopass]]~ (for storing passwords/authentication)
**** Configuration
***** Isync
****** [[file:~/.config/mbsync/config][Mbsync config]]
Configure mbsync to fetch emails /see also:/ https://wiki.archlinux.org/index.php/isync
#+BEGIN_SRC conf :tangle no
IMAPAccount gmail
Host imap.gmail.com
User brettmandler@gmail.com
PassCmd "gopass show -o -f websites/gmail.com/brettmandler"
SSLType IMAPS
CertificateFile /etc/ssl/certs/ca-certificates.crt

IMAPStore gmail-remote
Account gmail

MaildirStore gmail-local
Path ~/var/mail/
Inbox ~/var/mail/Inbox

Channel gmail-inbox
Master :gmail-remote:
Slave :gmail-local:
Patterns "INBOX"
Create Both
Expunge Both
SyncState *

Channel gmail-trash
Master :gmail-remote:"[Gmail]/Bin"
Slave :gmail-local:"Trash"
Create Both
Expunge Both
SyncState *

Channel gmail-sent
Master :gmail-remote:"[Gmail]/Sent Mail"
Slave :gmail-local:"Sent Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-all
Master :gmail-remote:"[Gmail]/All Mail"
Slave :gmail-local:"All Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-all
Master :gmail-remote:"[Gmail]/Drafts"
Slave :gmail-local:"Drafts"
Create Both
Expunge Both
SyncState *

Group gmail
Channel gmail-inbox
Channel gmail-drafts
Channel gmail-sent
Channel gmail-trash
Channel gmail-all
#+END_SRC
****** Emacs setup
Configure emacs to use mbsync as the ~mu4e-get-mail-command~
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq mu4e-get-mail-command "mbsync -c ~/.config/mbsync/config -a"))
#+END_SRC
***** Mu4e
****** Directories
Setup the deafault /maildirs/
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir        (expand-file-name "~/var/mail")
      mu4e-attachment-dir (expand-file-name "attachments" mu4e-maildir))
#+END_SRC
****** Gmail setup
Configure smtp and folders to work well with gmail
#+BEGIN_SRC emacs-lisp
(setq smtpmail-stream-type 'starttls
      smtpmail-smtp-user "brettmandler"
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)

(setq mu4e-sent-folder "/Sent Mail"
      mu4e-drafts-folder "/Drafts"
      mu4e-trash-folder "/Trash"
      mu4e-refile-folder "/All Mail")
      
(setq mu4e-maildir-shortcuts
      '(("/Inbox"     . ?i)
        ("/Sent Mail" . ?s)
        ("/All Mail"  . ?a)
        ("/Trash"     . ?t)))
#+END_SRC
****** Bookmarks
Set bookmarks for easily finding messages
#+BEGIN_SRC emacs-lisp
(setq mu4e-bookmarks
    `(("maildir:/Inbox" "Inbox" ?i)
        ("maildir:/Drafts" "Drafts" ?d)
        ("flag:unread AND maildir:/Inbox" "Unread messages" ?u)
        ("flag:flagged" "Starred messages" ?s)
        ("date:today..now" "Today's messages" ?t)
        ("date:7d..now" "Last 7 days" ?w)
        ("mime:image/*" "Messages with images" ?p)))

#+END_SRC
****** Icons
#+BEGIN_SRC emacs-lisp
(after! mu4e 
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-headers-has-child-prefix '("+" . "◼")
        mu4e-headers-empty-parent-prefix '("-" ."◽")
        mu4e-headers-first-child-prefix '("\\" . "↳")
        mu4e-headers-duplicate-prefix '("=" . "⚌")
        mu4e-headers-default-prefix '("|" . "┃")
        mu4e-headers-draft-mark '("D" . "📝 ")
        mu4e-headers-flagged-mark '("F" . "🏴 ")
        mu4e-headers-new-mark '("N" . "★ ")
        mu4e-headers-passed-mark '("P" . "→ ")
        mu4e-headers-replied-mark '("R" . "← ")
        mu4e-headers-seen-mark '("S" . "✓ ")
        mu4e-headers-trashed-mark '("T" . "✗ ")
        mu4e-headers-attach-mark '("a" . "📎 ")
        mu4e-headers-encrypted-mark '("x" . "🔐 ")
        mu4e-headers-signed-mark '("s" . "🔏 ")
        mu4e-headers-unread-mark '("u" . "✉ ")))
#+END_SRC
*** [[doom-modules:completion/company/][completion/company]]
**** Set maximum candidates for ~company-box~
#+BEGIN_SRC emacs-lisp
(after! company-box
  (setq company-box-max-candidates 10))
#+END_SRC
**** Setup ~company-perscient~
#+BEGIN_SRC emacs-lisp
(def-package! company-prescient
  :after company
  :hook (company-mode . company-prescient-mode))
#+END_SRC
**** Setup company ui
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-tooltip-limit 10
        company-tooltip-minimum-width 80
        company-tooltip-minimum 10
        company-backends
        '(company-capf company-dabbrev company-files company-yasnippet)
        company-global-modes '(not comint-mode erc-mode message-mode help-mode gud-mode)))
#+END_SRC
*** [[doom-modules:completion/ivy/][completion/ivy]]
**** Set ripgrep as the default program for ivy project search
#+BEGIN_SRC emacs-lisp
(setq +ivy-project-search-engines '(rg))
#+END_SRC
**** Setup ~ivy-rich~
#+BEGIN_SRC emacs-lisp
(after! ivy-rich
  (setq ivy-rich--display-transformers-list
        '(ivy-switch-buffer
          (:columns
           ((ivy-rich-candidate (:width 30 :face bold))
            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))
            (ivy-rich-switch-buffer-path (:width 50)))
           :predicate
           (lambda (cand) (get-buffer cand)))
          +ivy/switch-workspace-buffer
          (:columns
           ((ivy-rich-candidate (:width 30 :face bold))
            (ivy-rich-switch-buffer-size (:width 7 :face font-lock-doc-face))
            (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
            (ivy-rich-switch-buffer-major-mode (:width 18 :face doom-modeline-buffer-major-mode))
            (ivy-rich-switch-buffer-path (:width 50)))
           :predicate
           (lambda (cand) (get-buffer cand)))
          counsel-M-x
          (:columns
           ((counsel-M-x-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))
          counsel-describe-function
          (:columns
           ((counsel-describe-function-transformer (:width 40))
            (ivy-rich-counsel-function-docstring (:face font-lock-doc-face :width 80))))
          counsel-describe-variable
          (:columns
           ((counsel-describe-variable-transformer (:width 40))
            (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face :width 80))))
          counsel-recentf
          (:columns
           ((ivy-rich-candidate (:width 100))
            (ivy-rich-file-last-modified-time (:face font-lock-doc-face)))))))

(after! counsel
  (setq counsel-evil-registers-height 20
        counsel-yank-pop-height 20
        counsel-org-goto-face-style 'org
        counsel-org-headline-display-style 'title
        counsel-org-headline-display-tags t
        counsel-org-headline-display-todo t))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(after! ivy
  (ivy-rich-mode 1)
  (advice-add #'ivy-posframe-enable :around #'doom*shut-up)
  (setq ivy-posframe-parameters
        `((min-width . 120)
          (min-height . ,ivy-height)
          (left-fringe . 0)
          (right-fringe . 0)
          (internal-border-width . 10))
        ivy-display-functions-alist
        '((counsel-git-grep)
          (counsel-grep)
          (counsel-pt)
          (counsel-ag)
          (counsel-rg)
          (counsel-notmuch)
          (swiper)
          (counsel-irony . ivy-display-function-overlay)
          (ivy-completion-in-region . ivy-display-function-overlay)
          (t . ivy-posframe-display-at-frame-center))))
(after! ivy
  (setq ivy-use-selectable-prompt t
        ivy-auto-select-single-candidate t
        ivy-rich-parse-remote-buffer nil
        +ivy-buffer-icons nil
        ivy-use-virtual-buffers nil
        ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-cd-selected
        ivy-height 20
        ivy-rich-switch-buffer-name-max-length 50))
#+END_SRC
**** Add helpful action to ~counsel-M-x~
#+BEGIN_SRC emacs-lisp
(after! ivy
  (ivy-add-actions
   'counsel-M-x
   `(("h" +ivy/helpful-function "Helpful"))))
#+END_SRC
**** Setup ~counsel-tramp~
#+BEGIN_SRC emacs-lisp
(def-package! counsel-tramp
  :commands (counsel-tramp))
#+END_SRC
**** Setup [[github:asok/all-the-icons-ivy][all-the-icons-ivy]]
#+BEGIN_SRC emacs-lisp
(def-package! all-the-icons-ivy
  :after ivy
  :init
  (dolist (cmd '( counsel-find-file
                  counsel-file-jump
                  projectile-find-file
                  counsel-projectile-find-file
                  counsel-dired-jump counsel-projectile-find-dir
                  counsel-projectile-switch-project))
    (ivy-set-display-transformer cmd #'all-the-icons-ivy-file-transformer)))
#+END_SRC
*** [[doom-modules:editor/lispy/][editor/lispy]]
**** Set lispy outline
#+BEGIN_SRC emacs-lisp
(after! lispy
  (setq lispy-outline "^;; \\(?:;[^#]\\|\\*+\\)"
        lispy-outline-header ";;"))
#+END_SRC
*** [[doom-modules:emacs/dired/][emacs/dired]]
**** Set ~dired-k~ to use human readable styles
#+BEGIN_SRC emacs-lisp
(after! dired-k
    (setq dired-k-human-readable t))
#+END_SRC
**** Set ~dired-k~ filesize colors
#+BEGIN_SRC emacs-lisp
(after! dired-k
  (setq dired-k-size-colors
      '((1024 .   "#CFECA3")
        (2048 .   "#C9EA98")
        (3072 .   "#C3E88D")
        (10240 .  "#FFD558")
        (20480 .  "#FFD079")
        (40960 .  "#FFCB6B")
        (102400 . "#F8A389")
        (262144 . "#F7977A")
        (524288 . "#F78C6C"))))
#+END_SRC
**** Enable ~diredfl-mode~ on ~dired~ buffers
#+BEGIN_SRC emacs-lisp
(def-package! diredfl
  :hook (dired-mode . diredfl-mode))
#+END_SRC
*** [[doom-modules:emacs/eshell/][emacs/eshell]]
**** Set ~eshell~ aliases
#+BEGIN_SRC emacs-lisp
(after! eshell
  (set-eshell-alias!
   "f"   "find-file $1"
   "l"   "ls -lh"
   "d"   "dired $1"
   "gl"  "(call-interactively 'magit-log-current)"
   "gs"  "magit-status"
   "gc"  "magit-commit"
   "rg"  "rg --color=always $*"))
#+END_SRC
*** [[doom-modules:emacs/term/][emacs/term]]
**** Set fish as my default shell
#+BEGIN_SRC emacs-lisp
(after! multi-term
  (setq multi-term-program "/usr/bin/fish"))
#+END_SRC
*** [[doom-modules:feature/evil/][feature/evil]]
**** [[github:luxbock/evil-cleverparens][evil-cleverparens]]
Setup evil cleverparens for ~emacs-lisp-mode~ and ~clojure-mode~
#+BEGIN_SRC emacs-lisp
(def-package! evil-cleverparens
  :hook (lisp-mode emacs-lisp-mode clojure-mode)
  :init
  (setq evil-move-beyond-eol t
        evil-cleverparens-use-additional-movement-keys nil
        evil-cleverparens-use-additional-bindings nil))
#+END_SRC
**** [[github:syl20bnr/evil-lisp-state][evil-lisp-state]]
#+BEGIN_SRC emacs-lisp
(def-package! evil-lisp-state
  :init (setq evil-lisp-state-global t)
  :config (evil-lisp-state-leader "SPC m l"))
#+END_SRC
*** [[doom-modules:feature/workspaces/][feature/workspaces]]
**** Create new workspaces when switching projects
#+BEGIN_SRC emacs-lisp
(setq +workspaces-on-switch-project-behavior t)
#+END_SRC
*** [[doom-modules:lang/javascript/][lang/javascript]]
**** Set the ~NODE_ENV~ environemnt variable
#+BEGIN_SRC emacs-lisp
(setenv "NODE_ENV" "development")
#+END_SRC
**** Set default indentation offset to 2 spaces
#+BEGIN_SRC emacs-lisp
(after! js2-mode (setq js2-basic-offset 2))
#+END_SRC
**** Enable bounce indentation
#+BEGIN_SRC emacs-lisp
(after! js2-mode (setq js2-bounce-indent-p t))
#+END_SRC
**** Auto format buffers
#+BEGIN_SRC emacs-lisp
(after! js2-mode (add-hook 'js2-mode-hook 'eslintd-fix-mode))
#+END_SRC
**** Add support for yarn
#+BEGIN_SRC emacs-lisp
(def-package! yarn
  :after js2-mode
  :config
  (setq yarn-vars-test-cmd "yarn test"))
#+END_SRC
**** Add support for ~import-js~
#+BEGIN_SRC emacs-lisp
(def-package! import-js
  :defer t
  :init
  (add-hook! (js2-mode rjsx-mode)
    (add-hook 'after-save-hook #'import-js-fix nil t)))
(advice-add '+javascript|cleanup-tide-processes :after 'kill-import-js)
#+END_SRC
*** [[doom-modules:lang/org/][lang/org]]
**** Set default directories for org files
#+BEGIN_SRC emacs-lisp
(after! org-mode
  (setq +org-directory (expand-file-name "~/usr/org")
        org-agenda-files (list org-directory)))
#+END_SRC
**** Change the character that displays on collapsed headings
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▼ ")
#+END_SRC
**** Change the default bullet character
#+BEGIN_SRC emacs-lisp
(after! org-bullets
  (setq org-bullets-bullet-list '("#")))
#+END_SRC
**** Set default notes filename
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)))
#+END_SRC
**** Set maximum number of files for refile
#+BEGIN_SRC emacs-lisp
(after! org
  (setq
   org-refile-targets '((nil :maxlevel . 5)
                        (org-agenda-files :maxlevel . 5))))
#+END_SRC
**** Aditional config
#+BEGIN_SRC emacs-lisp
(after! org
  :config
  (setq +org-dir org-directory
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-capture-templates
        '(("c" "Code Task" entry (file+headline org-default-notes-file "Coding Tasks")
           "* TODO %?\n  Entered on: %U - %a\n")
          ("t" "Task" entry (file+headline org-default-notes-file "Tasks")
           "* TODO %?\n  Entered on: %U")
          ("n" "Note" entry (file+olp+datetree org-default-notes-file)
           "* %?\n\n"))))
#+END_SRC
*** [[doom-modules:lang/sh/][lang/sh]]
**** [[github:gnouc/flycheck-checkbashisms][flycheck-checkbashisms]]
Flycheck checker for checking files begining with =#!/bin/sh= which also contain
code exclusive to bash *requires:* ~checkbashisms~
#+BEGIN_SRC emacs-lisp
(def-package! flycheck-checkbashisms
  :when (and (featurep! :feature syntax-checker)(featurep! :lang sh))
  :after sh-mode
  :hook (flycheck-mode . flycheck-checkbashisms-setup))
#+END_SRC
*** [[doom-modules:lang/web/][lang/web]]
**** Set default indentation for css to 2 spaces
#+BEGIN_SRC emacs-lisp
(after! css-mode
  (setq css-indent-offset 2))
#+END_SRC
*** [[doom-modules:tools/magit/][tools/magit]]
**** Set default location for ~magit-list-repositories~
#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories '(("~/src" . 3) ("~/.emacs.d") ("~/.config/doom")))
#+END_SRC
**** Be sure to automatically sign commits
#+BEGIN_SRC emacs-lisp
(after! magit
  (setq magit-commit-arguments '("--gpg-sign=72B1D27CB7D82F0F")
        magit-rebase-arguments '("--autostash" "--gpg-sign=72B1D27CB7D82F0F")
        magit-pull-arguments   '("--rebase" "--autostash" "--gpg-sign=72B1D27CB7D82F0F"))
  (magit-define-popup-option 'magit-rebase-popup
    ?S "Sign using gpg" "--gpg-sign=" #'magit-read-gpg-secret-key))
#+END_SRC
**** Enable magithub
#+BEGIN_SRC emacs-lisp
(setq +magit-hub-features t)
#+END_SRC
**** Set the prefered git url method
#+BEGIN_SRC emacs-lisp
(after! magithub (setq magithub-preferred-remote-method 'git_url))
#+END_SRC
**** Set the default directory to clone new repos
#+BEGIN_SRC emacs-lisp
(after! magithub (setq magithub-clone-default-directory "~/src/github.com"))
#+END_SRC
*** tools/prodigy
#+BEGIN_SRC emacs-lisp
(def-package! prodigy
  :config
  (prodigy-define-tag
   :name 'webpack
   :ready-message "Compiled successfully!")

  (prodigy-define-tag
   :name 'serve
   :ready-message "Serving!")

  (prodigy-define-service
   :name "JnJ Podcasts"
   :port 3000
   :command "yarn"
   :args '("serve")
   :cwd "~/src/github.com/brettm12345/jnjpodcasts"
   :tags '(serve))

  (prodigy-define-service
   :name "JnJ Podcasts Dev Server"
   :port 5000
   :command "yarn"
   :args '("start")
   :cwd "~/src/github.com/brettm12345/jnjpodcasts"
   :tags '(webpack)))
#+END_SRC
*** [[doom-modules:tools/rgb/][tools/rgb]]
**** Disable x colors in ~rainbow-mode~
#+BEGIN_SRC emacs-lisp
(after! rainbow-mode
  (setq rainbow-x-colors nil))
#+END_SRC
*** tools/tldr
**** Set tldr directory
#+BEGIN_SRC emacs-lisp
(def-package! tldr
  :commands (tldr)
  :config
  (setq tldr-directory-path (concat doom-etc-dir "tldr/")))
#+END_SRC
*** [[doom-modules:ui/doom/][ui/doom]]
Doom user interface settings
**** Fonts
I like to use [[github:be5invis/Iosevka][Iosevka]] as my programming font
***** Default font
~doom-font~ is the default font for emacs to use
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Term Custom" :weight 'medium :size 22))
#+END_SRC
***** Variable pitch
~doom-variable-pitch-font~ is a proportonal font used for reading emails, doc etc.
#+BEGIN_SRC emacs-lisp
(setq doom-variable-pitch-font (font-spec :family "Noto Sans" :weight 'medium :width 'extra-condensed :size 18))
#+END_SRC
***** Serif
~doom-serif-font~ is a font used for the ~fixed-pitch-serif~ face
#+BEGIN_SRC emacs-lisp
(setq doom-serif-font (font-spec :family "Noto Serif" :weight 'semi-bold :width 'extra-condensed))
#+END_SRC
***** Big font
~doom-big-font~ is the default font to use for ~doom-big-font-mode~
#+BEGIN_SRC emacs-lisp
(setq doom-big-font (font-spec :family "Iosevka Term Custom Medium" :size 45))
#+END_SRC
**** Line Numbers
Use vim-esque relative line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
**** Theme
#+BEGIN_SRC emacs-lisp
(add-to-list '+doom-solaire-themes '(doom-palenight . t))
(setq doom-theme 'doom-palenight)
(after! doom-themes
  (setq
   doom-themes-enable-bold t
   doom-themes-enable-italic t)
  (make-face-italic font-lock-variable-name-face)
  (make-face-italic font-lock-builtin-face)
  (make-face-italic font-lock-comment-face)
  (setq doom-themes-padded-modeline t))
#+END_SRC

#+RESULTS:
: t
*** [[doom-modules:ui/modeline/][ui/modeline]]
**** Setup [[github:seagle0128/doom-modeline][doom-modeline]]
#+BEGIN_SRC emacs-lisp
(def-package! doom-modeline
  :defer t
  :hook (after-init . doom-modeline-init))
#+END_SRC
**** Display color icons for ~major-mode~
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-major-mode-color-icon t))
#+END_SRC
**** Set modeline width
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-bar-width 3))
#+END_SRC
**** Set modeline height
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-height 45))
#+END_SRC
**** Show github notifications
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-github t))
#+END_SRC
**** Hide emacs version
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-version nil))
#+END_SRC
**** Set buffer file name style
***** Show filename relative from current project =emacs/lisp/comint.el=
#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-buffer-file-name-style 'relative-from-project))
#+END_SRC
***** Examples
Given =~/Projects/FOSS/emacs/lisp/comint.el=
| tunricate-upto-project   | ~/P/F/emacs/lisp/comint.el          |
| turnicate-from-project   | ~/Projects/FOSS/emacs/l/comint.el   |
| turnicate-with-project   | emacs/l/comint.el                   |
| turnicate-except-project | ~/P/F/emacs/l/comint.el             |
| turnicate-upto-root      | ~/P/F/e/lisp/comint.el              |
| turnicate-all            | ~/P/F/e/l/comint.el                 |
| relative-from-project    | emacs/lisp/comint.el                |
| relative-to-project      | lisp/comint.el                      |
| file-name                | comint.el                           |
| buffer-name              | comint.el<2> (uniquify buffer name) |
#+END_SRC
**** Use a padded modeline
#+BEGIN_SRC emacs-lisp
(setq doom-palenight-padded-modeline 6)
#+END_SRC
*** [[doom-modules:ui/treemacs/][ui/treemacs]]
**** Have treemacs follow the currently open file
#+BEGIN_SRC emacs-lisp
(after! treemacs (treemacs-follow-mode))
#+END_SRC
